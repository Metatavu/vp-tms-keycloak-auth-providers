version: "3"
services:
  mysql:
    hostname: mysql
    image: mysql:8
    platform: linux/amd64
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 3306:3306
    command: --lower_case_table_names=1
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: keycloak
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 5s
      timeout: 5s
      start_period: 5s
  keycloak:
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.2
    command:
      - start-dev
    ports:
      - 8080:8080
      - 5005:5005
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      KC_DB_URL: jdbc:mysql://mysql:3306/keycloak?useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=convertToNull
      KC_DB: mysql
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_PROXY_HEADERS: xforwarded
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      DEBUG: "true"
      DEBUG_PORT: "*:5005"
    volumes:
      - ./target/vp-tms-keycloak-auth-providers-1.2.0-jar-with-dependencies.jar:/opt/keycloak/providers/vp-tms-keycloak-auth-providers.jar

  vehicle-management-service:
    hostname: vehicle-management-service
    build:
      context: ../vp-kuljetus-vehicle-management-service-api
      dockerfile: src/main/docker/Dockerfile.jvm
    ports:
      - 8280:8080
    depends_on:
      mysql:
        condition: service_healthy
      keycloak:
        condition: service_started
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://mysql:3306/vehicle-management-service?useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=convertToNull
      QUARKUS_DATASOURCE_PASSWORD: root
      QUARKUS_DATASOURCE_USERNAME: root
      QUARKUS_DATASOURCE_REACTIVE_URL: mysql://mysql:3306/vehicle-management-service?useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=convertToNull
      QUARKUS_HTTP_CORS_ORIGINS: "*"
      QUARKUS_OIDC_AUTH_SERVER_URL: http://keycloak:8080/auth/realms/vp
      QUARKUS_OIDC_CLIENT_ID: vehicle-management-service
      QUARKUS_OIDC_CREDENTIALS_SECRET: 3e3e3e3e-3e3e-3e3e-3e3e-3e3e3e3e3e3e
      VP_ENV: development
      VP_VEHICLEMANAGEMENT_TELEMATICS_APIKEY: 3e3e3e3e-3e3e-3e3e-3e3e-3e3e3e3e3e3e
      QUARKUS_OIDC_CONNECTION_DELAY: 10s

  user-management-service:
    hostname: user-management-service
    build:
      context: ../vp-kuljetus-user-management-service-api
      dockerfile: src/main/docker/Dockerfile.jvm
    ports:
      - 8380:8080
    depends_on:
      mysql:
        condition: service_healthy
      keycloak:
        condition: service_started
    environment:
      MP.MESSAGING.INCOMING.VP-IN.CONNECTOR: smallrye-rabbitmq
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://mysql:3306/user-management-service?useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=convertToNull
      QUARKUS_DATASOURCE_PASSWORD: root
      QUARKUS_DATASOURCE_REACTIVE_URL: mysql://mysql:3306/user-management-service?useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=convertToNull
      QUARKUS_DATASOURCE_USERNAME: root
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      QUARKUS_OIDC_AUTH_SERVER_URL: http://keycloak:8080/auth/realms/vp
      QUARKUS_OIDC_CLIENT_ID: user-management-service
      QUARKUS_OIDC_CREDENTIALS_SECRET: xx
      RABBITMQ-HOST: rabbitmq.example.com
      VP_KEYCLOAK_ADMIN_CLIENT: na
      VP_KEYCLOAK_ADMIN_PASSWORD: na
      VP_KEYCLOAK_ADMIN_SECRET: na
      VP_KEYCLOAK_ADMIN_USER: na
      VP_VEHICLEMANAGEMENT_TELEMATICS_APIKEY: na
      mp.messaging.incoming.vp-in.exchange.name: exchange
      mp.messaging.incoming.vp-in.queue.name: incoming_queue
      mp.messaging.incoming.vp-in.queue.x-queue-type: quorum
      mp.messaging.incoming.vp-in.routing-keys: DRIVER_WORKING_STATE_CHANGE
      mp.messaging.outgoing.vp-out.connector: smallrye-rabbitmq
      mp.messaging.outgoing.vp-out.exchange.name: exchange
      rabbitmq-password: na
      rabbitmq-port: 5672
      rabbitmq-username: na

volumes:
  db_data: {}
